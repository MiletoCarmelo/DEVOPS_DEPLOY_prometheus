==== ./umbrella_prometheus/values.yaml ====

kube-prometheus-stack:
  prometheusOperator:
    enabled: true
    createCustomResourceDefinitions: true
    admissionWebhooks:
      enabled: false
    tls:
      enabled: false

prometheus:
  enabled: true
  prometheusSpec:
    retention: 15d
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

grafana:
  enabled: true
  adminPassword: admin
  persistence:
    enabled: true
    size: 10Gi
  
  # Configuration des dashboards
  dashboards:
    default:
      kubernetes:
        gnetId: 315
        revision: 3
        datasource: Prometheus
      kafka:
        gnetId: 7589
        revision: 5
        datasource: Prometheus

  # Configuration des datasources
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-operated:9090
        isDefault: true
  
  # Configuration des plugins
  plugins:
    - grafana-piechart-panel
    - grafana-clock-panel

  # Configuration des alertes
  notifiers:
    - name: email-notifier
      type: email
      uid: email1
      # Autres configurations d'alerte selon vos besoins

  # Configurations de sécurité supplémentaires
  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472

  # Configuration des ressources
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 200m

  # Configuration de l'ingress si nécessaire
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.local
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"

==== ./umbrella_prometheus/Chart.yaml ====

apiVersion: v2
name: prometheus-umbrella
description: Umbrella chart for Prometheus monitoring stack using kube-prometheus-stack
version: 0.1.0
dependencies:
  - name: kube-prometheus-stack
    version: 66.3.0
    repository: https://prometheus-community.github.io/helm-charts

==== ./umbrella_prometheus/templates/prometheusrules/custom-alerts.yaml ====

{{- if .Values.prometheusRules.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: custom-k8s-alerts
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
spec:
  groups:
    - name: kubernetes-apps
      rules:
        # Alerte pour les pods qui crashent fréquemment
        - alert: PodCrashLooping
          expr: increase(kube_pod_container_status_restarts_total[1h]) > 5
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: Pod crashing multiple times
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} is restarting frequently

        # Alerte pour les pods bloqués en état Pending
        - alert: PodStuckInPending
          expr: kube_pod_status_phase{phase="Pending"} == 1
          for: 30m
          labels:
            severity: warning
          annotations:
            summary: Pod stuck in Pending state
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in pending state for more than 30 minutes

    - name: memory-alerts
      rules:
        # Alerte pour utilisation élevée de la mémoire
        - alert: HighMemoryUsage
          expr: container_memory_usage_bytes / container_spec_memory_limit_bytes * 100 > 85
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: High memory usage detected
            description: Container {{ $labels.container }} in pod {{ $labels.pod }} is using more than 85% of its memory limit

    - name: node-alerts
      rules:
        # Alerte pour nœud presque plein
        - alert: NodeDiskAlmostFull
          expr: disk_used_percent > 85
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: Node disk almost full
            description: Node {{ $labels.instance }} disk usage is {{ $value }}%

    - name: kafka-alerts
      rules:
        # Alerte pour les topics Kafka en retard
        - alert: KafkaTopicLag
          expr: kafka_consumergroup_lag > 10000
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: Kafka consumer group lag
            description: Consumer group {{ $labels.consumergroup }} on topic {{ $labels.topic }} is lagging by {{ $value }} messages

    - name: service-alerts
      rules:
        # Alerte pour les erreurs HTTP
        - alert: HighErrorRate
          expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) * 100 > 5
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: High HTTP error rate
            description: Service {{ $labels.service }} has a {{ $value }}% error rate

    - name: database-alerts
      rules:
        # Alerte pour les connexions PostgreSQL
        - alert: PostgresqlHighConnections
          expr: pg_stat_activity_count > 100
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High number of PostgreSQL connections
            description: Database {{ $labels.database }} has {{ $value }} active connections
{{- end }}

==== ./umbrella_prometheus/templates/servicemonitors/kafka-monitor.yaml ====

{{- if .Values.serviceMonitors.kafka.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kafka-monitor
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: kafka
  endpoints:
  - port: metrics
{{- end }}

