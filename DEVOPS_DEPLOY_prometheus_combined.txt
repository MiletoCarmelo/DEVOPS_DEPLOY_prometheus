==== ./dashboards/kafka-dashboard.json.tpl ====

{
  "kind": "dashboard",
  "annotations": {
    "list": []
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 1,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "expr": "kafka_consumergroup_lag",
          "refId": "A"
        }
      ],
      "title": "Kafka Consumer Group Lag",
      "type": "timeseries"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [
    "kafka",
    "monitoring"
  ],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Kafka Overview",
  "uid": "kafka-overview",
  "version": 0
}

==== ./umbrella_prometheus/values.yaml ====

kube-prometheus-stack:

  namespace: monitoring
  prometheusOperator:
    enabled: true
    createCustomResourceDefinitions: true  # Changed to true to ensure CRDs are created
    admissionWebhooks:
      enabled: true  # Enable webhooks
      failurePolicy: Ignore  # More lenient failure policy
      certManager:
        enabled: true  # Use cert-manager for certificates
      patch:
        enabled: true  # Activer le patch pour installer les certificats
    tls:
      enabled: true # Enable TLS
    serviceMonitor:
      enabled: true
      selfMonitor: true
      labels:
        app.kubernetes.io/managed-by: prometheus-operator
    serviceAccount:
      annotations:
        "kubectl.kubernetes.io/last-applied-configuration": ""

  prometheus:
    enabled: true
    prometheusSpec:
      serviceMonitorSelector:
        matchLabels:
          app.kubernetes.io/managed-by: prometheus-operator
      ruleSelector:
        matchLabels:
          app.kubernetes.io/managed-by: prometheus-operator
      serviceMonitorNamespaceSelector: {}
      ruleNamespaceSelector: {}
      retention: 15d
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "200m"
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: "local-path"
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
    serviceAccount:
      annotations:
        "kubectl.kubernetes.io/last-applied-configuration": ""

  prometheus-node-exporter:
    hostNetwork: false  # Désactive hostNetwork pour éviter les conflits de ports
    service:
      port: 9100
      targetPort: 9100

  kubeStateMetrics:
    enabled: true
    rbac:
      create: true
      clusterRole:
        rules:
          - apiGroups: [""]
            resources: ["nodes", "pods", "services", "resourcequotas", "replicationcontrollers", "limitranges", "persistentvolumeclaims", "persistentvolumes", "namespaces", "endpoints"]
            verbs: ["list", "watch"]
          - apiGroups: ["apps"]
            resources: ["statefulsets", "daemonsets", "deployments", "replicasets"]
            verbs: ["list", "watch"]
          - apiGroups: ["batch"]
            resources: ["cronjobs", "jobs"]
            verbs: ["list", "watch"]
          - apiGroups: ["autoscaling"]
            resources: ["horizontalpodautoscalers"]
            verbs: ["list", "watch"]
          - apiGroups: ["networking.k8s.io"]
            resources: ["ingresses", "networkpolicies"]
            verbs: ["list", "watch"]
    serviceAccount:
      create: true
    podSecurityPolicy:
      enabled: false
    serviceMonitor:
      enabled: true
    selfMonitor:
      enabled: true
    ports:
      metrics:
        port: 8080
      telemetry:
        port: 8081
    livenessProbe:
      httpGet:
        path: /livez
        port: 8080
    readinessProbe:
      httpGet:
        path: /readyz
        port: 8080

  grafana:
    enabled: true
    adminPassword: admin  # Remplacer par un secret si nécessaire
    persistence:
      enabled: true
      type: pvc
      size: 10Gi
      storageClassName: "local-path"
      accessModes:
        - ReadWriteOnce
      finalizers:
        - kubernetes.io/pvc-protection
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        searchNamespace: ALL
        defaultFolderName: "dashboards"
        provider:
          folder: "dashboards"
    plugins:
      - grafana-piechart-panel
      - grafana-clock-panel
    securityContext:
      runAsUser: 472
      runAsGroup: 472
      fsGroup: 472
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - grafana.local
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-admission-webhook: "true"  # Désactive la validation du webhook

# Ajout des versions API pour les CRDs
serviceMonitors:
  kafka:
    enabled: true
    namespace: kafka-dev
    scrapeInterval: 60s
    apiVersion: monitoring.coreos.com/v1
    groupVersion: monitoring.coreos.com/v1  # Add missing field

prometheusRules:
  apiVersion: monitoring.coreos.com/v1
  groupVersion: monitoring.coreos.com/v1  # Add missing field

kafka:
  lagThreshold: 5000






==== ./umbrella_prometheus/Chart.yaml ====

apiVersion: v2
name: prometheus-umbrella
description: Umbrella chart for Prometheus monitoring stack using kube-prometheus-stack
version: 0.1.1
maintainers:
  - name: Carmelo Mileto
    email: carmelo.mileto@gmail.com
dependencies:
  - name: kube-prometheus-stack
    version:  66.3.1
    repository: https://prometheus-community.github.io/helm-charts


==== ./umbrella_prometheus/templates/dashboards-configmap.yaml ====

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: {{ .Release.Namespace }}
  labels:
    grafana_dashboard: "true"
    app: {{ .Release.Name }}
data:
  {{- range $path, $_ := .Files.Glob "dashboards/*.json.tpl" }}
  {{ base $path | trimSuffix ".tpl" }}: |
{{ $.Files.Get $path | indent 4 }}
  {{- end }}


